// parameters
let fs = require("fs");

let importedModel = JSON.parse(fs.readFileSync("./AmbiguousPaths/PBiModel-Import.xmla"));
let directQueryModel = JSON.parse(fs.readFileSync("./AmbiguousPaths/PBiModel-DQ.xmla"));
let outputModelName = "PBiModel-output";
let connectionName = "CIDW";
let sqlConnString = "Provider=SQLNCLI11;Data Source=BISQL;Integrated Security=SSPI;Persist Security Info=false;Initial Catalog=DWDB


// general model info
importedModel.create.database.name = outputModelName;
importedModel.create.database.id = outputModelName;
importedModel.create.database.compatibilityLevel = 1200;

// keep only one connection to database
let dataSources = importedModel.create.database.model.dataSources;
dataSources[0].name = connectionName;
dataSources[0].connectionString = sqlConnString;
dataSources.splice(1);

// remove all LocalDateTable_* automatically generated by Power BI for date columns.
let tables = importedModel.create.database.model.tables;
tables = tables.filter(t => !(t.name.startsWith("LocalDateTable_") || t.name.startsWith("DateTableTemplate_")));
importedModel.create.database.model.tables = tables;


console.log(`Tables: ${tables.length} imported, ${directQueryModel.create.database.model.tables.length} in Direct Query mode.`)
// check for missing tables
let missingTables = directQueryModel.create.database.model.tables.filter(t =>
    tables.filter(dqt => dqt.name == t.name).length == 0);
    console.log(`Missing tables: ${missingTables.length}`);
missingTables.forEach(function (t) {
    console.log(`${t.name}`);
});

let importedColumns = 0;
let directQueryColumns = 0;
let importedMeasures = 0;
let directQueryMeasures = 0;

// also remove relationships to these date tables
let relationships = importedModel.create.database.model.relationships;
relationships = relationships.filter(r => !(r.fromTable.startsWith("LocalDateTable_") || r.toTable.startsWith("LocalDateTable_")));
importedModel.create.database.model.relationships = relationships;

// check for missing relationships
let missingRelationships = directQueryModel.create.database.model.relationships.filter(r =>
    relationships.filter(dqr => dqr.name == r.name).length == 0);
console.log(`Missing relationships (will be automatically added): ${missingRelationships.length}`);
missingRelationships.forEach(function (r) {
    console.log(`${r.name}   ${r.fromTable} (${r.fromColumn}) --- ${r.toTable} (${r.toColumn})`);
    // add them back into the model
    relationships.push(r);
});


tables.forEach(function (tbl) {
    let directQueryTbl = directQueryModel.create.database.model.tables.filter(t => t.name == tbl.name)[0];
    importedMeasures += tbl.measures ? tbl.measures.length : 0;
    directQueryMeasures += directQueryTbl.measures ? directQueryTbl.measures.length : 0;
    importedColumns += tbl.columns ? tbl.columns.length : 0;
    directQueryColumns += directQueryTbl.columns ? directQueryTbl.columns.length : 0;

    // all tables use the same connection
    if (tbl.partitions[0].source.dataSource) {
        tbl.partitions[0].source.dataSource = connectionName;
    }

    // tables use the correct SQL Query based on the defined Power Query transformations
    var query = tbl.partitions[0].source.query;
    if (query) {
        tbl.partitions[0].source.query = directQueryTbl.partitions[0].source.query;
    }

});

console.log(`Measures: ${importedMeasures} imported, ${directQueryMeasures} in Direct Query mode.`)
console.log(`Columns: ${importedColumns} imported, ${directQueryColumns} in Direct Query mode.`)

fs.writeFileSync(outputModelName + ".xmla", JSON.stringify(importedModel, null, 2));